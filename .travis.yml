language:
  - cpp
  - python
python:
  - "2.7"
compiler:
  - gcc
cache:
  apt: true
  pip: true
  directories:
    - $HOME/.ccache
    - $HOME/.cache/pip
    - $HOME/apt-cacher-ng
dist: trusty
services:
  - docker
env:
  global:
    - USE_DOCKER=true
    - USE_TRAVIS=true
    - ROS_PARALLEL_JOBS="-j1 -l1"
  matrix:
    #- ROS_DISTRO=groovy ROSWS=rosws BUILDER=rosbuild USE_DEB=true
    #- ROS_DISTRO=groovy ROSWS=rosws BUILDER=rosbuild USE_DEB=false
    #- ROS_DISTRO=groovy ROSWS=wstool BUILDER=catkin USE_DEB=true
    #- ROS_DISTRO=groovy ROSWS=wstool BUILDER=catkin USE_DEB=false
    - ROS_DISTRO=hydro ROSWS=wstool BUILDER=catkin USE_DEB=true
    - ROS_DISTRO=hydro ROSWS=wstool BUILDER=catkin USE_DEB=false
    - ROS_DISTRO=indigo ROSWS=wstool BUILDER=catkin USE_DEB=true
    - ROS_DISTRO=indigo ROSWS=wstool BUILDER=catkin USE_DEB=false
    - ROS_DISTRO=kinetic ROSWS=wstool BUILDER=catkin USE_DEB=true
    - ROS_DISTRO=kinetic ROSWS=wstool BUILDER=catkin USE_DEB=false
matrix:
  allow_failures:
    - env: ROS_DISTRO=hydro ROSWS=wstool BUILDER=catkin USE_DEB=false
    - env: ROS_DISTRO=indigo ROSWS=wstool BUILDER=catkin USE_DEB=false
    - env: ROS_DISTRO=kinetic ROSWS=wstool BUILDER=catkin USE_DEB=false
before_install:
  # Install openrtm_aist & add osrf
  - export BEFORE_SCRIPT="sudo apt-get install -qq -y ros-${ROS_DISTRO}-openrtm-aist; sudo -E sh -c 'echo \"deb http://packages.osrfoundation.org/drc/ubuntu \`lsb_release -cs\` main\" > /etc/apt/sources.list.d/drc-latest.list'; wget http://packages.osrfoundation.org/drc.key -O - | sudo apt-key add -; sudo apt-get update -qq"
  # On kinetic, drcsim is not released
  - if [ ${ROS_DISTRO} != "kinetic" ] ; then export BEFORE_SCRIPT="${BEFORE_SCRIPT}; sudo apt-get install -qq -y drcsim"; fi
  - if [ $USE_DEB == true ] ; then mkdir -p ~/ros/ws_rtmros_gazebo/src; fi
  - if [ $USE_DEB == true ] ; then git clone https://github.com/start-jsk/rtmros_tutorials ~/ros/ws_rtmros_gazebo/src/rtmros_tutorials; fi
script: source .travis/travis.sh
notifications:
  email:
    on_success: always
    on_failure: always
